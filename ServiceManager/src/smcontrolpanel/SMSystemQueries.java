package smcontrolpanel;

import SMDataDefinition.SMTableapbatchentries;
import SMDataDefinition.SMTableapbatchentrylines;
import SMDataDefinition.SMTableapbatches;
import SMDataDefinition.SMTableglaccounts;

public class SMSystemQueries {
	
	public static final int APQUERY_BATCH_POSTING_JOURNAL_INDEX = 0;
	
	public static String getSystemQuery(int iQueryIndex){
		String s = "";
		
		switch(iQueryIndex){
		case APQUERY_BATCH_POSTING_JOURNAL_INDEX:
			s = sAPPostingJournalQuery();
		}
		
		return s;
		
	}
	private static String sAPPostingJournalQuery(){
		
		return 
		" [[*SETVARIABLES*SET @StartingBatchNumber := [[Enter the STARTING batch number: ]] ]]" + "\n"
		+ " [[*SETVARIABLES*SET @EndingBatchNumber := [[Enter the ENDING batch number: ]] ]]" + "\n"
		+ " [[*SETVARIABLES*SET @SelectedBatchType := [[*DROPDOWNLIST*{Batch type:}{0,1,3,4}{Invoice,Payment,Check Reversal, ALL Types}]] ]]" + "\n"
		+ " [[*SETVARIABLES*SET @rownum := 0]]" + "\n"
		+ " [[*SETVARIABLES*SET @GLTotalsBackgroundcolor := 'LightBlue']]" + "\n"
		+ " [[*SETVARIABLES*SET @VendorTotalsBackgroundcolor := 'LightGrey']]" + "\n"
		+ " [[*SETVARIABLES*SET @TotalsBackgroundcolor := 'LightGreen']]" + "\n"
		+ " [[*SETVARIABLES*SET @BatchBackgroundcolor := 'LightBlue']]" + "\n"
		+ " [[*SETVARIABLES*SET @EntryBackgroundcolor := 'LightGrey']]" + "\n"
		+ " [[*SETVARIABLES*SET @LineBackgroundcolor := 'White']]" + "\n"

		+ "\n"
		+ " SELECT" + "\n"
		+ " CASE" + "\n"
		+ "     WHEN RECORDTYPE='0' THEN BATCHDESC" + "\n"
		+ "     WHEN RECORDTYPE='1' THEN ENTRYDESC" + "\n"
		+ "     WHEN RECORDTYPE='2' THEN LINEDESC" + "\n"
		+ "     WHEN RECORDTYPE='3' THEN TOTALSDESC" + "\n"
		+ "     WHEN RECORDTYPE='4' THEN VENDORHEADINGS" + "\n"
		+ "     WHEN RECORDTYPE='5' THEN VENDORTOTALSDESC" + "\n"
		+ "     WHEN RECORDTYPE='6' THEN GLHEADINGS" + "\n"
		+ "     WHEN RECORDTYPE='7' THEN GLTOTALSDESC" + "\n"
		+ " ELSE ''" + "\n"
		+ " END AS '<DIV STYLE = '' font-family:Arial; font-size:large; font-weight:bold; '' >POSTING JOURNAL</DIV>'" + "\n"
		+ " FROM" + "\n"
		+ "\n"
		+ " (SELECT" + "\n"
		+ " BATCHDESC" + "\n"
		+ " , ENTRYDESC" + "\n"
		+ " , LINEDESC" + "\n"
		+ " , TOTALSDESC" + "\n"
		+ " , VENDORHEADINGS" + "\n"
		+ " , VENDORTOTALSDESC" + "\n"
		+ " , GLHEADINGS" + "\n"
		+ " , GLTOTALSDESC" + "\n"
		+ " , BATCHNUMBER" + "\n"
		+ " , ENTRYNUMBER" + "\n"
		+ " , LINENUMBER" + "\n"
		+ " , RECORDTYPE" + "\n"
		+ " FROM" + "\n"
		+ "\n"
		+ " (" + "\n"
		+ " /* START THE BATCH SECTION HERE */" + "\n"
		+ " SELECT" + "\n"
		+ " " + SMTableapbatches.TableName + "." + SMTableapbatches.lbatchnumber + " AS BATCHNUMBER" + "\n"
		+ " , ' ' AS ENTRYNUMBER" + "\n"
		+ " , ' ' AS LINENUMBER" + "\n"
		+ " , CONCAT(" + "\n"
		+ "     '<DIV style='' background-color:', @BatchBackgroundcolor, '; color:Black; font-family:Arial; font-size:Large; ''>'" + "\n"
		+ "     ,'<B>Batch Number:</B>&nbsp;'" + "\n"
		+ "     ,'<I>',CAST(" + SMTableapbatches.TableName + "." + SMTableapbatches.lbatchnumber + " AS CHAR),'</I>'" + "\n"
		+ "     ,' '" + "\n"
		+ "     ,'<B>Description:</B>&nbsp;'" + "\n" 
		+ "     ,'<I>'," + SMTableapbatches.TableName + "." + SMTableapbatches.sbatchdescription + ",'</I>'" + "\n"
		+ "     ,' '" + "\n"
		+ "     ,'<B>Date:</B>&nbsp;'" + "\n" 
		+ "     ,'<I>',DATE_FORMAT(" + SMTableapbatches.TableName + "." + SMTableapbatches.datbatchdate + ", \"%c/%e/%Y\"),'</I>'" + "\n"
		+ "     ,' '" + "\n"
		+ "     ,'<B>Status:</B>&nbsp;'" + "\n" 
		+ "     ,'<I>'" + "\n"
		+ "\n"
		+ "     , CASE" + "\n"
		+ "           WHEN " + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + "=2 THEN 'DELETED'" + "\n"
		+ "           WHEN " + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + "=3 THEN 'POSTED'" + "\n"
		+ "     ELSE 'N/A'" + "\n"
		+ "     END" + "\n"
		+ "\n"
		+ "     ,'</I>'" + "\n"
		+ "     ,' '" + "\n"
		+ "     ,'<B>Type:</B>&nbsp;'" + "\n"
		+ "     ,'<I>'" + "\n"
		+ "     , CASE" + "\n"
		+ "           WHEN " + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + "=0 THEN 'INVOICE'" + "\n"
		+ "           WHEN " + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + "=1 THEN 'PAYMENT'" + "\n"
		+ "           WHEN " + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + "=3 THEN 'CHECK REVERSAL'" + "\n"
		+ "       ELSE 'N/A'" + "\n"
		+ "       END" + "\n"
		+ "\n"
		+ "     ,'</I>'" + "\n"
		+ "     ,' '" + "\n"
		+ "     ,'<B>Posted:</B>&nbsp;'" + "\n" 
		+ "     ,'<I>', DATE_FORMAT(" + SMTableapbatches.TableName + "." + SMTableapbatches.datpostdate + ", \"%c/%e/%Y\"), '</I>'" + "\n"
		+ "     ,'<DIV>'" + "\n"
		+ " ) AS BATCHDESC" + "\n"
		+ " , ' ' AS ENTRYDESC" + "\n"
		+ " , ' ' AS LINEDESC" + "\n"
		+ " , ' ' AS TOTALSDESC" + "\n"
		+ " , ' ' AS VENDORHEADINGS" + "\n"
		+ " , ' ' AS VENDORTOTALSDESC" + "\n"
		+ " , ' ' AS GLHEADINGS" + "\n"
		+ " , ' ' AS GLTOTALSDESC" + "\n"
		+ "\n"
		+ "  /* RECORDTYPES: BATCH = 0, ENTRY = 1, LINE = 2, TOTALS = 3, VENDOR HEADING = 4, VENDOR SUMMARY = 5, GL HEADING = 6, GL SUMMARY = 7 */" + "\n"
		+ " , '0' AS RECORDTYPE" + "\n"
		+ " FROM " + SMTableapbatches.TableName + "\n"
		+ " WHERE (" + "\n"
		+ " (" + SMTableapbatches.TableName + "." + SMTableapbatches.lbatchnumber + " >= @StartingBatchNumber)" + "\n"
		+ " AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.lbatchnumber + " <= @EndingBatchNumber)" + "\n"
		+ " AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + " >= IF(@SelectedBatchType < 4, @SelectedBatchType, 0))" + "\n"
		+ " AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + " <= IF(@SelectedBatchType < 4, @SelectedBatchType, 4))" + "\n"
		+ " AND ((" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + " = 2) OR (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + " = 3))" + "\n"
		+ " )" + "\n"
		+ " /* End the AP BATCH SECTION HERE */" + "\n"
		+ "\n"
		+ " UNION ALL" + "\n"
		+ "\n"
		+ "  /* START THE ENTRY SECTION HERE */" + "\n"
		+ " SELECT" + "\n"
		+ " " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.lbatchnumber + " AS BATCHNUMBER" + "\n"
		+ ", " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.lentrynumber + " AS ENTRYNUMBER" + "\n"
		+ ", ' ' AS LINENUMBER" + "\n"
		+ ", ' ' AS BATCHDESC" + "\n"
		+ ", CONCAT(" + "\n"
		+ "      '<DIV style='' background-color:', @EntryBackgroundcolor, '; font-family:Arial; font-size:Medium; ''>'" + "\n"
		+ "      ,'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'" + "\n"
		+ "      ,'<B>Entry Number:</B>&nbsp;', CAST(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.lentrynumber + " AS CHAR)" + "\n"
		+ "      ,' '" + "\n"
		+ "\n"
		+ "      ,'<B>Doc Type:</B>&nbsp;'" + "\n" 
		+ "      ,'<I>'" + "\n"
		+ "\n"
		+ "     , CASE" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=0 THEN 'INVOICE'" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=1 THEN 'DEBIT NOTE'" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=2 THEN 'CREDIT NOTE'" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=3 THEN 'N/A'" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=4 THEN 'PAYMENT'" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=5 THEN 'PRE_PAY'" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=6 THEN 'APPLY-TO'" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=7 THEN 'MISC PAYMENT'" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=8 THEN 'CHECK REVERSAL'" + "\n"
		+ "       ELSE 'N/A'" + "\n"
		+ "       END" + "\n"
		+ "\n"
		+ "     ,'</I>'" + "\n"
		+ "     ,' '" + "\n"
		+ "     ,'<B>Description:</B>&nbsp;', " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.sentrydescription + "\n"
		+ "     ,' '" + "\n"
		+ "\n"
		+ "     , CASE" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=0 THEN CONCAT('<B>Inv. #:</B>&nbsp;', apbatchentries.sdocnumber)" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=1 THEN CONCAT('<B>Doc. #:</B>&nbsp;', apbatchentries.sdocnumber)" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=2 THEN CONCAT('<B>Doc. #:</B>&nbsp;', apbatchentries.sdocnumber)" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=3 THEN CONCAT('<B>Doc. #:</B>&nbsp;', apbatchentries.sdocnumber)" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=4 THEN CONCAT('<B>Check #:</B>&nbsp;', apbatchentries.schecknumber)" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=5 THEN CONCAT('<B>Check #:</B>&nbsp;', apbatchentries.schecknumber)" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=6 THEN CONCAT('<B>Doc. #:</B>&nbsp;', apbatchentries.sdocnumber)" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=7 THEN CONCAT('<B>Check #:</B>&nbsp;', apbatchentries.schecknumber)" + "\n"
		+ "           WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=8 THEN CONCAT('<B>Doc. #:</B>&nbsp;', apbatchentries.sdocnumber)" + "\n"
		+ "       ELSE 'N/A'" + "\n"
		+ "     END" + "\n"
		+ "\n"
		+ "     ,' '" + "\n"
		+ "     ,'<B>Doc Date:</B>&nbsp;', DATE_FORMAT(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.datdocdate + ", \"%c/%e/%Y\")" + "\n"
		+ "     ,' '" + "\n"
		+ "     ,'<B>Vendor:</B>&nbsp;', " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.svendoracct + "\n"
		+ "     ,' '" + "\n"
		+ "     ,'<B>Name:</B>&nbsp;', " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.svendorname + "\n"
		+ "     ,' '" + "\n"
		+ "     ,'<B>Amt:</B>&nbsp;', FORMAT(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + ",2)" + "\n"
		+ "     ,'</DIV>'" + "\n"
		+ " ) AS ENTRYDESC" + "\n"
		+ " , ' ' AS LINEDESC" + "\n"
		+ " , ' ' AS TOTALSDESC" + "\n"
		+ " , ' ' AS VENDORHEADINGS" + "\n"
		+ " , ' ' AS VENDORTOTALSDESC" + "\n"
		+ " , ' ' AS GLHEADINGS" + "\n"
		+ " , ' ' AS GLTOTALSDESC" + "\n"
		+ "\n"
		+ "  /* RECORDTYPES: BATCH = 0, ENTRY = 1, LINE = 2, TOTALS = 3, VENDOR HEADING = 4, VENDOR SUMMARY = 5, GL HEADING = 6, GL SUMMARY = 7 */" + "\n"
		+ " , '1' AS RECORDTYPE" + "\n"
		+ "  FROM " + SMTableapbatchentries.TableName + "\n"
		+ "  LEFT JOIN " + SMTableapbatches.TableName + "\n"
		+ "  ON " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.lbatchnumber + " = " + SMTableapbatches.TableName + "." + SMTableapbatches.lbatchnumber + "\n"
		+ "\n"
		+ "  WHERE (" + "\n"
		+ "  (" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.lbatchnumber + " >= @StartingBatchNumber)" + "\n"
		+ "  AND (" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.lbatchnumber + " <= @EndingBatchNumber)" + "\n"
		+ "  AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + " >= IF(@SelectedBatchType < 4, @SelectedBatchType, 0))" + "\n"
		+ "  AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + " <= IF(@SelectedBatchType < 4, @SelectedBatchType, 4))" + "\n"
		+ "  AND ((" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + " = 2) OR (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + " = 3))" + "\n"
		+ "  )" + "\n"
		+ " /* End the AP ENTRY SECTION HERE */" + "\n"
		+ "\n"
		+ "  UNION ALL" + "\n"
		+ "\n"
		+ "  /* Start the AP Batch Entry Line section here: */" + "\n"
		+ "  SELECT" + "\n"
		+ "  " + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber + " as BATCHNUMBER" + "\n"
		+ " , " + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lentrynumber + " as ENTRYNUMBER" + "\n"
		+ " , " + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.llinenumber + " as LINENUMBER" + "\n"
		+ " , ' ' AS BATCHDESC" + "\n"
		+ " , ' ' AS ENTRYDESC" + "\n"
		+ " , CONCAT(" + "\n"
		+ "     '<TABLE style='' width:100%; background-color:', @LineBackgroundcolor, '; font-family:Arial; font-size:Small; font-color:black; line-height:8px; '' ><TR>'" + "\n"
		+ "     ,'<TD style = '' width:10%; text-align:right; '' >', CAST(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.llinenumber + " AS CHAR), '</TD>'" + "\n"
		+ "     ,'<TD style = '' width:10%; text-align:left; '' >', CAST(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.sdistributionacct + " AS CHAR), '</TD>'" + "\n"
		+ "     ,'<TD style = '' width:40%; text-align:left; '' >', CAST(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.sdescription + " AS CHAR), '</TD>'" + "\n"
		+ "     ,'<TD style = '' width:20%; text-align:left; '' >', CAST(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.sapplytodocnumber + " AS CHAR), '</TD>'" + "\n"
		+ "     ,'<TD style = '' width:10%; text-align:right; '' >', CAST(FORMAT(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdapplieddiscountamt + ",2) AS CHAR), '</TD>'" + "\n"
		+ "     ,'<TD style = '' width:10%; text-align:right; '' >', CAST(FORMAT(" + SMTableapbatchentrylines .TableName + "." + SMTableapbatchentrylines.bdamount + ", 2) AS CHAR), '</TD>'" + "\n"
		+ "     ,'</TR></TABLE>'" + "\n"
		+ " ) AS LINEDESC" + "\n"
		+ " , ' ' AS TOTALSDESC" + "\n"
		+ " , ' ' AS VENDORHEADINGS" + "\n"
		+ " , ' ' AS VENDORTOTALSDESC" + "\n"
		+ " , ' ' AS GLHEADINGS" + "\n"
		+ " , ' ' AS GLTOTALSDESC" + "\n"
		+ "\n"
		+ "  /* RECORDTYPES: BATCH = 0, ENTRY = 1, LINE = 2, TOTALS = 3, VENDOR HEADING = 4, VENDOR SUMMARY = 5, GL HEADING = 6, GL SUMMARY = 7 */" + "\n"
		+ " , '2' AS RECORDTYPE" + "\n"
		+ "  FROM " + SMTableapbatchentrylines.TableName + "\n"
		+ "  LEFT JOIN " + SMTableapbatches.TableName + "\n"
		+ "  ON (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber + " = " + SMTableapbatches.TableName + "." + SMTableapbatches.lbatchnumber + ")" + "\n"
		+ "\n"
		+ "  WHERE (" + "\n"
		+ "  (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber + " >= @StartingBatchNumber)" + "\n"
		+ "  AND (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber + " <= @EndingBatchNumber)" + "\n"
		+ "  AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + " >= IF(@SelectedBatchType < 4, @SelectedBatchType, 0))" + "\n"
		+ "  AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + " <= IF(@SelectedBatchType < 4, @SelectedBatchType, 4))" + "\n"
		+ "  AND ((" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + " = 2) OR (apbatches.ibatchstatus = 3))" + "\n"
		+ "  )" + "\n"
		+ "  /* End the AP Batch Entry Line section here */" + "\n"
		+ "\n"
		+ "  UNION ALL" + "\n"
		+ "\n"
		+ "  /* Start the TOTALS section here: */" + "\n"
		+ "  SELECT" + "\n"
		+ "  @EndingBatchNumber as BATCHNUMBER" + "\n"
		+ " , 100000 as ENTRYNUMBER" + "\n"
		+ " , 100000 as LINENUMBER" + "\n"
		+ " , ' ' AS BATCHDESC" + "\n"
		+ " , ' ' AS ENTRYDESC" + "\n"
		+ " , ' ' AS LINEDESC" + "\n"
		+ " , CONCAT(" + "\n"
		+ "     '<TABLE style='' width:100%; background-color:', @TotalsBackgroundcolor, ';  font-family:Arial; font-size:Small; font-color:black; line-height:8px; '' ><TR>'" + "\n"
		+ "     ,'<TD style = '' width:90%; text-align:right; background-color:', @TotalsBackgroundcolor, '; font-family:Arial; font-size:Large; '' COLSPAN=5 >', '<B>GRAND TOTAL:</B>', '</TD>'" + "\n"
		+ "     ,'<TD style = '' width:10%; text-align:right; background-color:', @TotalsBackgroundcolor, '; font-family:Arial; font-size:Large; '' >',"
		+ "         CAST(FORMAT(SUM(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "),2) AS CHAR), '</TD>'" + "\n"
		+ "     ,'</TR></TABLE>'" + "\n"
		+ "     ,'<BR>'" + "\n"
		+ " )" + "\n"
		+ "  AS TOTALSDESC" + "\n"
		+ " , ' ' AS VENDORHEADINGS" + "\n"
		+ " , ' ' AS VENDORTOTALSDESC" + "\n"
		+ " , ' ' AS GLHEADINGS" + "\n"
		+ " , ' ' AS GLTOTALSDESC" + "\n"
		+ "\n"
		+ "  /* RECORDTYPES: BATCH = 0, ENTRY = 1, LINE = 2, TOTALS = 3, VENDOR HEADING = 4, VENDOR SUMMARY = 5, GL HEADING = 6, GL SUMMARY = 7 */" + "\n"
		+ " , '3' AS RECORDTYPE" + "\n"
		+ "  FROM " + SMTableapbatchentrylines.TableName + "\n"
		+ "  LEFT JOIN " + SMTableapbatches.TableName + "\n"
		+ "  ON (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber + " = " + SMTableapbatches.TableName + "." + SMTableapbatches.lbatchnumber + ")" + "\n"
		+ "\n"
		+ "  WHERE (" + "\n"
		+ "  (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber + " >= @StartingBatchNumber)" + "\n"
		+ "  AND (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber + " <= @EndingBatchNumber)" + "\n"
		+ "  AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + " >= IF(@SelectedBatchType < 4, @SelectedBatchType, 0))" + "\n"
		+ "  AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + " <= IF(@SelectedBatchType < 4, @SelectedBatchType, 4))" + "\n"
		+ "  AND ((" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + " = 2) OR (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + " = 3))" + "\n"
		+ "  )" + "\n"
		+ "  /* End the TOTALS section here */" + "\n"
		+ "\n"
		+ "  UNION ALL" + "\n"
		+ "\n"
		+ "  /* Start the VENDOR HEADING section here: */" + "\n"
		+ "  SELECT" + "\n"
		+ "  @EndingBatchNumber as BATCHNUMBER" + "\n"
		+ " , 100000 as ENTRYNUMBER" + "\n"
		+ " , 100000 as LINENUMBER" + "\n"
		+ " , ' ' AS BATCHDESC" + "\n"
		+ " , ' ' AS ENTRYDESC" + "\n"
		+ " , ' ' AS LINEDESC" + "\n"
		+ " , ' ' AS TOTALSDESC" + "\n"
		+ " , CONCAT(" + "\n"
		+ "     '<BR>'," + "\n"
		+ "     '<DIV style = '' font-size:large; font-weight:bold; ''>VENDOR SUMMARY</DIV>'," + "\n"
		+ "     '<BR>'" + "\n"
		+ " ) AS VENDORHEADINGS" + "\n"
		+ " , ' ' AS VENDORTOTALSDESC" + "\n"
		+ " , ' ' AS GLHEADINGS" + "\n"
		+ " , ' ' AS GLTOTALSDESC" + "\n"
		+ "\n"
		+ "  /* RECORDTYPES: BATCH = 0, ENTRY = 1, LINE = 2, TOTALS = 3, VENDOR HEADING = 4, VENDOR SUMMARY = 5, GL HEADING = 6, GL SUMMARY = 7 */" + "\n"
		+ " , '4' AS RECORDTYPE" + "\n"
		+ "  /* End the VENDOR HEADING section here */" + "\n"
		+ "\n"
		+ "  UNION ALL" + "\n"
		+ "\n"
		+ "  /* Start the VENDOR TOTALS section here: */" + "\n"
		+ "  SELECT" + "\n"
		+ "  @EndingBatchNumber as BATCHNUMBER" + "\n"
		+ " , 100000 as ENTRYNUMBER" + "\n"
		+ " , 100000 as LINENUMBER" + "\n"
		+ " , ' ' AS BATCHDESC" + "\n"
		+ " , ' ' AS ENTRYDESC" + "\n"
		+ " , ' ' AS LINEDESC" + "\n"
		+ " , ' ' AS TOTALSDESC" + "\n"
		+ " , ' ' AS VENDORHEADINGS" + "\n"
		+ " , CONCAT(" + "\n"
		+ "     '<TABLE style='' width:80%; background-color:', @VendorTotalsBackgroundcolor, ';  font-family:Arial; font-size:Small; font-color:black; line-height:8px; '' ><TR>'" + "\n"
		+ "     ,'<TD style = '' width:10%; text-align:left; background-color:', @VendorTotalsBackgroundcolor, '; font-family:Arial; font-size:Large; '' >', '<B>', " 
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.svendoracct + ", '</B>', '</TD>'" + "\n"
		+ "     ,'<TD style = '' width:80%; text-align:left; background-color:', @VendorTotalsBackgroundcolor, '; font-family:Arial; font-size:Large; '' >', " 
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.svendorname + ", ':', '</TD>'" + "\n"
		+ "     ,'<TD style = '' width:10%; text-align:right; background-color:', @VendorTotalsBackgroundcolor, '; font-family:Arial; font-size:Large; '' >',"
				+ " CAST(FORMAT(SUM(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "),2) AS CHAR), '</TD>'" + "\n"
		+ "     ,'</TR></TABLE>'" + "\n"
		+ " )" + "\n"
		+ "  AS VENDORTOTALSDESC" + "\n"
		+ " , ' ' AS GLHEADINGS" + "\n"
		+ " , ' ' AS GLTOTALSDESC" + "\n"
		+ "\n"
		+ "  /* RECORDTYPES: BATCH = 0, ENTRY = 1, LINE = 2, TOTALS = 3, VENDOR HEADING = 4, VENDOR SUMMARY = 5, GL HEADING = 6, GL SUMMARY = 7 */" + "\n"
		+ " , '5' AS RECORDTYPE" + "\n"
		+ "  FROM " + SMTableapbatchentrylines.TableName + "\n"
		+ "  LEFT JOIN " + SMTableapbatchentries.TableName + "\n"
		
		+ "  ON (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber + " = " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.lbatchnumber + ")"
		+ "      AND ("  + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lentrynumber + " = " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.lentrynumber + ")" + "\n"
		+ "  LEFT JOIN " + SMTableapbatches.TableName + "\n"
		+ "  ON (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber + " = " + SMTableapbatches.TableName + "." + SMTableapbatches.lbatchnumber + ")" + "\n"
		+ "  WHERE (" + "\n"
		+ "  (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber + " >= @StartingBatchNumber)" + "\n"
		+ "  AND (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber + " <= @EndingBatchNumber)" + "\n"
		+ "  AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + " >= IF(@SelectedBatchType < 4, @SelectedBatchType, 0))" + "\n"
		+ "  AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + " <= IF(@SelectedBatchType < 4, @SelectedBatchType, 4))" + "\n"
		+ "  AND ((" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + " = 2) OR (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + " = 3))" + "\n"
		+ "  )" + "\n"
		+ "  GROUP BY " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.svendoracct + "\n"
		+ "  /* End the VENDOR TOTALS section here */" + "\n"
		+ "\n"
		+ "  UNION ALL" + "\n"
		+ "\n"
		+ "  /* Start the GL HEADING section here: */" + "\n"
		+ "  SELECT" + "\n"
		+ "  @EndingBatchNumber as BATCHNUMBER" + "\n"
		+ " , 100000 as ENTRYNUMBER" + "\n"
		+ " , 100000 as LINENUMBER" + "\n"
		+ " , ' ' AS BATCHDESC" + "\n"
		+ " , ' ' AS ENTRYDESC" + "\n"
		+ " , ' ' AS LINEDESC" + "\n"
		+ " , ' ' AS TOTALSDESC" + "\n"
		+ " , ' ' AS VENDORHEADINGS" + "\n"
		+ " , ' ' AS VENDORTOTALSDESC" + "\n"
		+ " , CONCAT(" + "\n"
		+ "     '<BR>'," + "\n"
		+ "     '<DIV style = '' font-size:large; font-weight:bold; ''>GL SUMMARY</DIV>'," + "\n"
		+ "     '<BR>'" + "\n"
		+ " ) AS GLHEADINGS" + "\n"
		+ " , ' ' AS GLTOTALSDESC" + "\n"
		+ "\n"
		+ "  /* RECORDTYPES: BATCH = 0, ENTRY = 1, LINE = 2, TOTALS = 3, VENDOR HEADING = 4, VENDOR SUMMARY = 5, GL HEADING = 6, GL SUMMARY = 7 */" + "\n"
		+ " , '6' AS RECORDTYPE" + "\n"
		+ "  /* End the GL HEADING section here */" + "\n"
		+ "\n"
		+ "  UNION ALL" + "\n"
		+ "\n"
		+ "  /* Start the GL TOTALS section here: */" + "\n"
		+ "  SELECT" + "\n"
		+ "  @EndingBatchNumber as BATCHNUMBER" + "\n"
		+ " , 100000 as ENTRYNUMBER" + "\n"
		+ " , 100000 as LINENUMBER" + "\n"
		+ " , ' ' AS BATCHDESC" + "\n"
		+ " , ' ' AS ENTRYDESC" + "\n"
		+ " , ' ' AS LINEDESC" + "\n"
		+ " , ' ' AS TOTALSDESC" + "\n"
		+ " , ' ' AS VENDORHEADINGS" + "\n"
		+ " , ' ' AS VENDORTOTALSDESC" + "\n"
		+ " , ' ' AS GLHEADINGS" + "\n"
		+ " , CONCAT(" + "\n"
		+ "     '<TABLE style='' width:80%; background-color:', @GLTotalsBackgroundcolor, ';  font-family:Arial; font-size:Small; font-color:black; line-height:8px; '' ><TR>'" + "\n"
		+ "     ,'<TD style = '' width:20%; text-align:left; background-color:', @GLTotalsBackgroundcolor, '; font-family:Arial; font-size:Large; '' >', '<B>GL Acct: </B>', GLACCT, '</TD>'" + "\n"
		+ "     ,'<TD style = '' width:50%; text-align:left; background-color:', @GLTotalsBackgroundcolor, '; font-family:Arial; font-size:Large; '' >', GLDESCRIPTION, '</TD>'" + "\n"
		+ "     ,'<TD style = '' width:5%; text-align:left; background-color:', @GLTotalsBackgroundcolor, '; font-family:Arial; font-size:Large; '' ><B>Debit:</B></TD>'" + "\n"
		+ "     ,'<TD style = '' width:10%; text-align:right; background-color:', @GLTotalsBackgroundcolor, '; font-family:Arial; font-size:Large; '' >', IF(SUM(GLDEBITAMT) != 0.00, CAST(FORMAT(SUM(GLDEBITAMT),2) AS CHAR), ''), '</TD>'" + "\n"
		+ "     ,'<TD style = '' width:5%; text-align:left; background-color:', @GLTotalsBackgroundcolor, '; font-family:Arial; font-size:Large; '' ><B>Credit:</B></TD>'" + "\n"
		+ "     ,'<TD style = '' width:10%; text-align:right; background-color:', @GLTotalsBackgroundcolor, '; font-family:Arial; font-size:Large; '' >', IF(SUM(GLCREDITAMT) != 0.00, CAST(FORMAT(SUM(GLCREDITAMT),2) AS CHAR), ''), '</TD>'" + "\n"
		+ "     ,'</TR></TABLE>'" + "\n"
		+ " )" + "\n"
		+ "  AS GLTOTALSDESC" + "\n"
		+ " , '7' AS RECORDTYPE" + "\n"
		+ "  FROM" + "\n"
		+ "  (SELECT" + "\n"
		+ "  " + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.sdistributionacct + " AS GLACCT" + "\n"
		+ " , " + SMTableglaccounts.TableName + "." + SMTableglaccounts.sDesc + " AS GLDESCRIPTION" + "\n"
		+ " , CASE" + "\n"
		+ "       /* INVOICE LINE: if the distribution line is positive it's a DEBIT, if it's negative, it's a CREDIT */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=0 THEN IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "), 0.00)" + "\n"
		+ "       /* DEBIT LINE: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=1 THEN IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "), 0.00)" + "\n"
		+ "       /* CREDIT LINE: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=2 THEN IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, 0.00, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "))" + "\n"
		+ "       /* N/A LINE (not used): */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=3 THEN 0.00" + "\n"
		+ "       /* PAYMENT LINE: if the distribution line is positive it's a CREDIT, if it's negative, it's a DEBIT */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=4 THEN IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, 0.00, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "))" + "\n" 
		+ "       /* PRE-PAY LINE: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=5 THEN IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, 0.00, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "))" + "\n" 
		+ "       /* APPLY-TO LINE: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=6 THEN IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, 0.00, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "))" + "\n" 
		+ "       /* MISC PAYMENT LINE: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=7 THEN IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, 0.00, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "))" + "\n"
		+ "       /* CHECK REVERSAL LINE: if it's positive, it's a CREDIT, if it's negative, it's a DEBIT */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=8 THEN  IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, 0.00, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "))" + "\n"
		+ "       ELSE 'N/A'" + "\n"
		+ "  END" + "\n"
		+ "  AS GLDEBITAMT" + "\n"
		+ "\n"
		+ " , CASE" + "\n"
		+ "       /* INVOICE LINE: if the distribution line is positive it's a DEBIT, if it's negative, it's a CREDIT */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=0 THEN IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, 0.00, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "))" + "\n"
		+ "       /* DEBIT LINE: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=1 THEN IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, 0.00, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "))" + "\n"
		+ "       /* CREDIT LINE: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=2 THEN IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "), 0.00)" + "\n"
		+ "       /* N/A LINE (not used): */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=3 THEN 0.00" + "\n"
		+ "       /* PAYMENT LINE: if the distribution line is positive it's a CREDIT, if it's negative, it's a DEBIT */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=4 THEN IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "), 0.00)" + "\n" 
		+ "       /* PRE-PAY LINE: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=5 THEN IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "), 0.00)" + "\n" 
		+ "       /* APPLY-TO LINE: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=6 THEN IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "), 0.00)" + "\n" 
		+ "       /* MISC PAYMENT LINE: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=7 THEN IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "), 0.00)" + "\n"
		+ "       /* CHECK REVERSAL LINE: if it's positive, it's a CREDIT, if it's negative, it's a DEBIT */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=8 THEN  IF("
			+ SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + " > 0, ABS(" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.bdamount + "), 0.00)" + "\n"
		+ "       ELSE 'N/A'" + "\n"
		+ "  END" + "\n"
		+ "  AS GLCREDITAMT" + "\n"
		+ "  FROM " + SMTableapbatchentrylines.TableName + "\n"
		+ "  LEFT JOIN " + SMTableapbatchentries.TableName + "\n"
		+ "  ON (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber+ " = " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.lbatchnumber + ")"
			+ " AND (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lentrynumber + " = " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.lentrynumber + ")" + "\n"
		+ "  LEFT JOIN " + SMTableapbatches.TableName + "\n"
		+ "  ON (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber + " = " + SMTableapbatches.TableName + "." + SMTableapbatches.lbatchnumber + ")" + "\n"
		+ "  LEFT JOIN " + SMTableglaccounts.TableName + " ON " + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.sdistributionacct + " = " + SMTableglaccounts.TableName + "." + SMTableglaccounts.sAcctID + "\n"
		+ "  WHERE (" + "\n"
		+ "  (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber + " >= @StartingBatchNumber)" + "\n"
		+ "  AND (" + SMTableapbatchentrylines.TableName + "." + SMTableapbatchentrylines.lbatchnumber + " <= @EndingBatchNumber)" + "\n"
		+ "  AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + " >= IF(@SelectedBatchType < 4, @SelectedBatchType, 0))" + "\n"
		+ "  AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + " <= IF(@SelectedBatchType < 4, @SelectedBatchType, 4))" + "\n"
		+ "  AND ((" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + " = 2) OR (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + " = 3))" + "\n"
		+ "  )" + "\n"
		+ "\n"
		+ "  UNION ALL" + "\n"
		+ "\n"
		+ "  SELECT" + "\n"
		+ "  " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.scontrolacct + " AS GLACCT" + "\n"
		+ " , " + SMTableglaccounts.TableName + "." + SMTableglaccounts.sDesc + " AS GLDESCRIPTION" + "\n"
		+ " , CASE" + "\n"
		+ "       /* INVOICE ENTRY: if the entry is positive it's a CREDIT, if it's negative, it's a DEBIT */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=0 THEN IF(" 
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, 0.00, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "))" + "\n"
		+ "       /* DEBIT ENTRY: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=1 THEN IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, 0.00, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "))" + "\n"
		+ "       /* CREDIT ENTRY: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=2 THEN IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "), 0.00)" + "\n"
		+ "       /* N/A ENTRY (not used): */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=3 THEN 0.00" + "\n"
		+ "       /* PAYMENT ENTRY: if the entry is positive it's a DEBIT, if it's negative, it's a CREDIT */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=4 THEN IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "), 0.00)" + "\n" 
		+ "       /* PRE-PAY ENTRY: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=5 THEN IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "), 0.00)" + "\n" 
		+ "       /* APPLY-TO ENTRY: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=6 THEN IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "), 0.00)" + "\n" 
		+ "       /* MISC PAYMENT ENTRY: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=7 THEN IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "), 0.00)" + "\n"
		+ "       /* CHECK REVERSAL ENTRY: if it's positive, it's a DEBIT, if it's negative, it's a CREDIT */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=8 THEN  IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "), 0.00)" + "\n"
		+ "       ELSE 'N/A'" + "\n"
		+ "  END" + "\n"
		+ "  AS GLDEBITAMT" + "\n"
		+ "\n"
		+ " , CASE" + "\n"
		+ "       /* INVOICE ENTRY: if the entry is positive it's a CREDIT, if it's negative, it's a DEBIT */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=0 THEN IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "), 0.00)" + "\n"
		+ "       /* DEBIT ENTRY: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=1 THEN IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "), 0.00)" + "\n"
		+ "       /* CREDIT LINE: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=2 THEN IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, 0.00, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "))" + "\n"
		+ "       /* N/A ENTRY (not used): */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=3 THEN 0.00" + "\n"
		+ "       /* PAYMENT ENTRY: if the entry is positive it's a DEBIT, if it's negative, it's a CREDIT */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=4 THEN IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, 0.00, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "))" + "\n" 
		+ "       /* PRE-PAY ENTRY: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=5 THEN IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, 0.00, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "))" + "\n" 
		+ "       /* APPLY-TO ENTRY: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=6 THEN IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, 0.00, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "))" + "\n" 
		+ "       /* MISC PAYMENT ENTRY: */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=7 THEN IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, 0.00, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "))" + "\n"
		+ "       /* CHECK REVERSAL ENTRY: if it's positive, it's a DEBIT, if it's negative, it's a CREDIT */" + "\n"
		+ "       WHEN " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.ientrytype + "=8 THEN  IF("
			+ SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + " > 0, 0.00, ABS(" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.bdentryamount + "))" + "\n"
		+ "       ELSE 'N/A'" + "\n"
		+ "  END" + "\n"
		+ "  AS GLCREDITAMT" + "\n"
		+ "  FROM " + SMTableapbatchentries.TableName + "\n"
		+ "  LEFT JOIN " + SMTableapbatches.TableName + "\n"
		+ "  ON (" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.lbatchnumber + " = " + SMTableapbatches.TableName + "." + SMTableapbatches.lbatchnumber + ")" + "\n"
		+ "  LEFT JOIN " + SMTableglaccounts.TableName + " ON " + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.scontrolacct + " = " + SMTableglaccounts.TableName + "." + SMTableglaccounts.sAcctID + "\n"
		+ "  WHERE (" + "\n"
		
		+ "  (" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.lbatchnumber + " >= @StartingBatchNumber)" + "\n"
		+ "  AND (" + SMTableapbatchentries.TableName + "." + SMTableapbatchentries.lbatchnumber + " <= @EndingBatchNumber)" + "\n"
		+ "  AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + " >= IF(@SelectedBatchType < 4, @SelectedBatchType, 0))" + "\n"
		+ "  AND (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchtype + " <= IF(@SelectedBatchType < 4, @SelectedBatchType, 4))" + "\n"
		+ "  AND ((" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + " = 2) OR (" + SMTableapbatches.TableName + "." + SMTableapbatches.ibatchstatus + " = 3))" + "\n"
		+ "  )" + "\n"
		+ "\n"
		+ " ) AS COMBINEDGLQUERY" + "\n"
		+ "\n"
		+ "  GROUP BY GLACCT" + "\n" 
		+ "\n"
		+ "  /* End the GL TOTALS section here */" + "\n"
		+ "\n"
		+ " ) AS UNIONQUERY" + "\n"
		+ "\n"
		+ "  /* Sort the results by batch, then within each batch, sort by record type */" + "\n"
		+ "\n"
		+ "  ORDER BY CAST(BATCHNUMBER AS SIGNED), CAST(ENTRYNUMBER AS SIGNED), CAST(LINENUMBER AS SIGNED), RECORDTYPE" + "\n"
		+ "\n"
		+ " ) AS SORTEDQUERY" + "\n"
		;
	}
}
